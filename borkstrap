#!/usr/bin/env ruby

# === borkstrap ===
# https://github.com/alfiepates/borkstrap

require 'optparse'
require 'open-uri'
require 'singleton'

module Borkstrap
	module RequiredKeywordArguments
		def need(keyword)
			raise ArgumentError, "missing keyword #{keyword.inspect}"
		end
	end

	class OptionParser
		def initialize(arguments)
			@arguments = arguments
		end

		def call
			options = { bork_head: false }
			::OptionParser.new do |option_parser|
				option_parser.banner = "Usage: ./borkstrap [options]"

				option_parser.on("--[no-]bork-HEAD",
					"Install Bork from HEAD instead of release") do |bork_head|

					options[:bork_head] = bork_head
				end

				option_parser.on("-r", "--repo repository", String,
					"Pull a Git repository with a Bork configuration") do |repository|

					options[:repo] =
						if github_shortname?(repository)
							"https://github.com/#{repository}"
						else
							repository
						end
				end
			end.parse!(@arguments)
			options
		end

		private

		def github_shortname?(url)
			url.scan("/").length == 1
		end
	end

	class Cases
		Entry = Struct.new(:key, :value)

		def initialize(cases)
			@cases = cases
		end

		def lookup(query)
			@cases.each { |c| return c.value if c.key === query }
			raise KeyError
		end

		def value?(query)
			@cases.any? { |c| c.value == query }
		end
	end

	class Host
		include Singleton

		def platform
			PLATFORMS.lookup(RUBY_PLATFORM)
		end
	end

	class BrewInstall
		include RequiredKeywordArguments

		def initialize(install_script_url: need(:install_script_url))
			@install_script_url = install_script_url
		end

		def install
			install_r, install_w = IO.pipe
			tee_r, tee_w = IO.pipe

			installer_pid = spawn("ruby", in: open(@install_script_url), out: install_w)
			tee_pid = spawn("tee", "/dev/stderr", in: install_r, err: tee_w)

			Process.wait(installer_pid)
			install_w.close
			Process.wait(tee_pid)
			tee_w.close

			if match = tee_r.read.match(/^Warning: (.*) is not in your PATH.$/)
				brew_bin = match[1]
				ENV["PATH"] = "#{brew_bin}#{File::PATH_SEPARATOR}#{ENV["PATH"]}"
			end
		end
	end

	class BorkInstall
		def initialize(head: false)
			@head = head
		end

		def head?
			@head
		end

		def install
			install_prequisites

			command = %W`brew install bork`
			command << "--HEAD" if head?
			system *command
		end

		private

		def install_prequisites
			system "brew install gcc git"
		end
	end

	class Platform
		include RequiredKeywordArguments

		attr_reader :brew_url

		def initialize(brew_url: need(:brew_url))
			@brew_url = brew_url
		end
	end

	PLATFORMS = Cases.new([
		Cases::Entry.new(/linux/, Platform.new(
			brew_url: "https://raw.githubusercontent.com/Linuxbrew/install/master/install",
		)),
		Cases::Entry.new(/darwin/, Platform.new(
			brew_url: "https://raw.githubusercontent.com/Homebrew/install/master/install",
		)),
	])

	if __FILE__ == $0
		options = OptionParser.new(ARGV).call

		puts "Installing Homebrew"
		BrewInstall.new(install_script_url: Host.instance.platform.brew_url).install

		puts "Installing Bork"
		BorkInstall.new(head: options[:bork_head]).install
	end
end
